---
# tasks file for define_inventory
- name: Main block
  tags: ['always', 'define_inventory']
  check_mode: false
  block:
    - name: Read build definition
      ansible.builtin.include_vars:
        file: "{{ auto_dir + '/' + SYS_NAME }}"
        name: 'environment_definition'

    - name: Display environment_definition
      ansible.builtin.debug:
        var: environment_definition

    - name: Check if required variables are defined
      ansible.builtin.set_fact:
        pdn: "{{ 'Primary Datacenter name is not defined' if (dcpn is not defined or dcpn == none) else '' }}"
      vars:
        dcpn: "{{ environment_definition.datacenter.primary.name }}"

    - name: Verify that all variables are defined
      ansible.builtin.assert:
        that:
          - vars[item] == ''
        fail_msg: "{{ vars[item] }}"
      loop: [pdn]

    - name: Verify that primary datacenter is supported
      ansible.builtin.assert:
        that:
          - "datacenters[dcpn] is defined"
        fail_msg: "The primary datacenter selected, {{ dcpn }}, is not in the list of supported datacenters. Aborting!"
      vars:
        dcpn: "{{ environment_definition.datacenter.primary.name }}"

    - name: Detect directory owner
      ansible.builtin.shell:
        cmd: set -o pipefail && ls -ld {{ auto_dir }}/Bash | awk '{print $3}' | xargs
        executable: /bin/bash
      register: dir_owner
      changed_when: false

    - name: Detect directory group
      ansible.builtin.shell:
        cmd: set -o pipefail && ls -ld {{ auto_dir }}/Bash | awk '{print $4}' | xargs
        executable: /bin/bash
      register: dir_group
      changed_when: false

    - name: Generate build inventory
      ansible.builtin.copy:
        src: "files/inventory/"
        dest: "{{ auto_dir + '/inventories/' + SYS_NAME | basename | splitext | first | lower }}"
        owner: "{{ dir_owner.stdout }}"
        group: "{{ dir_group.stdout }}"
        mode: '644'
      become: true

    - name: Customize inventory
      ansible.builtin.template:
        src: "{{ tmpl_item.name }}"
        dest: "{{ tmpl_item.dest }}"
        owner: "{{ dir_owner.stdout }}"
        group: "{{ dir_group.stdout }}"
        mode: '644'
      loop:
        - { name: 'templates/all.j2', dest: "{{ auto_dir + '/inventories/' + SYS_NAME | basename | splitext | first | lower + '/group_vars/all.yml' }}" }
        - { name: 'templates/hosts.j2', dest: "{{ auto_dir + '/inventories/' + SYS_NAME | basename | splitext | first | lower + '/hosts.yml' }}" }
      loop_control:
        loop_var: tmpl_item
      become: true
