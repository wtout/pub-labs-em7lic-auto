---
# Tasks for get_license
- block:
  - name: define get_vm_list_gl
    ansible.builtin.set_fact:
      get_vm_list_gl: true
    when: reg_vm_list is not defined
  - block:
    - ansible.builtin.include_tasks: task_get_list_vms.yml
    rescue:
    - ansible.builtin.debug:
        msg: "{{ reg_vm_list }}"
    always:
    - ansible.builtin.assert:
        that: reg_vm_list is succeeded
    when:
      - get_vm_list_gl|default(true)
  - name: define build_list_gl
    ansible.builtin.set_fact:
      build_list_gl: true
    when: vm_list is not defined
  - name: define list of VMs
    ansible.builtin.set_fact:
      vm_list: "{{ vm_list|default([]) + [{ 'vm_folder': vm_item.folder, 'vm_name': vm_item.guest_name, 'vm_uuid': vm_item.uuid}] }}"
    loop: "{{ reg_vm_list.virtual_machines|selectattr('guest_name','search','em7db|em7aio')|rejectattr('guest_name','search','on-decomm-list|stCtlVM-')|rejectattr('folder','search','Templates|vcenter|vCenter')|list }}"
    loop_control:
      loop_var: vm_item
      label: "{{ vm_item.guest_name }}"
    no_log: yes
    when:
      - build_list_gl|default(false)
  - name: initialize list of offline VMs
    ansible.builtin.set_fact:
      offline_vm_list: []
      offline_list: []
  - ansible.builtin.include_tasks:
      file: task_get_license_info.yml
      apply:
        vars:
          curr_folder: "{{ vm_item.vm_folder }}"
          curr_vm: "{{ vm_item.vm_name }}"
          curr_uuid: "{{ vm_item.vm_uuid }}"
    loop: "{{ vm_list|sort(attribute='vm_folder') }}"
    loop_control:
      loop_var: vm_item
  delegate_to: localhost
  run_once: yes
  tags: ['get_license']
